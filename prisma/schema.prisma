// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id          String         @id @unique @default(cuid())
  CPF         String?        @unique
  Name        String
  email       String         @unique
  Password    String?
  img         String
  cellNumber  String?
  dateBirth   String?
  Address     Address?       @relation(fields: [AddressCep], references: [id])
  scheduling  Scheduling[]
  AddressCep  String?
  PastService PastServices[]
}

model Provider {
  id         String @id @unique @default(cuid())
  CNPJ       String @unique
  Name       String
  email      String @unique
  Password   String
  img        String
  cellNumber String
  Rating     Float?

  Service     Service[]
  timeInteval TimeInterval[]
  scheduling  Scheduling[]
  Address     Address?       @relation(fields: [AddressCep], references: [id])
  AddressCep  String?
}

model Service {
  id          String @id @unique @default(cuid())
  NameService String
  price       String
  description String
  img         String
  Rating      Float?

  Category Category[]

  scheduling Scheduling[]

  PastService PastServices[]
  Provider    Provider?      @relation(fields: [providerId], references: [id])
  providerId  String?
}

model Category {
  id           String    @id @unique @default(cuid())
  NameCategory String    @unique
  description  String
  Service      Service?  @relation(fields: [ServiceId], references: [id])
  ServiceId    String?
  Products     Products? @relation(fields: [ProductsId], references: [id])
  ProductsId   String?
}

model TimeInterval {
  id                    String    @id @default(uuid())
  week_day              Int
  time_start_in_minutes Int
  time_end_in_minutes   Int
  Provider              Provider? @relation(fields: [providerId], references: [id])
  providerId            String?
}

model Scheduling {
  id           String    @id @default(uuid())
  date         DateTime
  name         String
  email        String
  observations String?
  created_at   DateTime  @default(now())
  Provider     Provider? @relation(fields: [providerId], references: [id])
  providerId   String?
  Client       Client?   @relation(fields: [clientId], references: [id])
  clientId     String?
  Service      Service?  @relation(fields: [serviceId], references: [id])
  serviceId    String?
}

model Products {
  id          String @id @unique @default(cuid())
  Name        String
  price       String
  description String
  img         String
  Rating      Float?

  Category Category[]
}

model PastServices {
  id        String   @id @unique @default(cuid())
  Service   Service? @relation(fields: [serviceId], references: [id])
  serviceId String?
  Payment   Payment? @relation(fields: [paymentId], references: [id])
  paymentId String?
  Client    Client?  @relation(fields: [clientId], references: [id])
  clientId  String?
}

model Address {
  id     String @id @default(cuid())
  cep    String
  number String

  Provider Provider[]

  Client Client[]
}

model Payment {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  Method    String

  service PastServices[]
}
